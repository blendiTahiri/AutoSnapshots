#Requires -Version 7
##===============================================
## Header
##===============================================
<#.SYNOPSIS
    Erstellen und löschen von Proxmox-Snapshots
.DESCRIPTION
    Das Skript stellt mittels dem Modul Corsinvest eine Verbindung zum Proxmox Cluster her, es werden die Clusterinformationen abgefragt, 
    das Zeitfenster für die Löschung der Snapshots wird definiert und die Snpashotnamen werden definiert gemäss Snapshot Management & Prozesse. 
    Es wird eine Liste der Snapshots erstellt und gemäss Aufbewahrungsfrist werden die Snapshots gelöscht, nach der Löschung werden die Snapshots für alle VM's erstellt
    Die Clusterinformationen, Fehlermeldungen, Skriptbeginn und Skriptende werden per Telegram an einen Chat versendet. Dafür wird das Modul PoshGram benötigt.
.EXAMPLE
    pwsh -File E:\Skripts\Run-Snapshotcycle.ps1

.NOTES
    Tested with Module Versions
    # PoshGram v2.2.0
    # Corsinvest ProxmoxVE API v7.1.3
    # SecretManagement KeePass v0.9.2
    # Microsoft Powershell Secretstore xy

    History
    1.0     Initial-Skript              19.05.2022      B.Tahiri
#>
##===============================================
## Variables for Base-Settings
##===============================================
# Hostidentification (needed for connection to the pve cluster)
$proxmoxConnectionHost = "192.168.10.10:8006"

# Keeping Time of Snapshots (in days)
$KEEPSNAPSHOT_IN_DAYS = 1

# Debug Settings
#$debugpreference = "SilentlyContinue"
$debugpreference = "Continue"

# Enable alarms
$alarm = $true
#$alarm = $false

# KeePass-Preferences
$VaultName = "IPADatabase"
$KEEPASS_VAULT = "E:\KeePass"

# Prefix
$PREFIX = "asn"

# Proxmox Settings
$proxmoxUserName = "Proxmox"
$proxmoxTaskTimeout = 1000000

# Poshgram Settings
$poshgramUserName = "Poshgram"

##===============================================
## Functions, Function-Libraries and Modules
##===============================================
#_Loading Function Module
try {
    $executionPath = $MyInvocation.MyCommand.Path | Split-Path
    Import-Module -Name "$executionPath\Funktionsmodul.psm1" -ErrorAction Stop
}
catch {
    Write-Host "Funktionsmodul konnte nicht geladen werden"
    exit 1
}

# Install needed modules
Install-ModuleIfNeeded PoshGram
Install-ModuleIfNeeded Corsinvest.ProxmoxVE.Api
Install-ModuleIfNeeded SecretManagement.KeePass
Install-ModuleIfNeeded Microsoft.Powershell.SecretStore

##===============================================
## Automatic Variables
##===============================================
# Actual Date and Time
$TODAY = Get-Date

# Prefix
$PREFIX_LENGTH = $PREFIX.length

# Generate name of Vm Snapshot
$newSnapShotName = $PREFIX + ($TODAY.ToString("yyyyMMddHHmm"))

# Startmessage and Endmessage
$scriptStartMessage = "Skript AutoSnapshot wurde gestartet: " + $TODAY.ToString("dd.MM.yyyy HH:mm")
$scriptEndMessage = "Skript AutoSnapshot wurde beendet (gestartet um: " + $TODAY.ToString("dd.MM.yyyy HH:mm") + ")"

# Get API Token for the connect-pve command
$proxmoxCredentials = Get-KeePassPW -AccountName $proxmoxUserName -VaultName $VaultName -VaultPath $KEEPASS_VAULT
$proxmoxApiToken = $proxmoxCredentials.Password

# Script excecution, Get BotId and BotToken for sending Messages
$poshGramCredentials = Get-KeePassPW -AccountName $poshgramUserName -VaultName $VaultName -VaultPath $KEEPASS_VAULT
$poshgramBotToken = $poshGramCredentials.Password
$poshgramBotId = $poshGramCredentials.UserName

##===============================================
## Main Code
##==============================================
# Send startmessage
Send-AlarmTextMessage -Message $scriptStartMessage -alarm $alarm -poshgramBotToken $poshgramBotToken -poshgramBotId $poshgramBotId

# Evaluate Timewindow of Scriptexecution
$executionTimeWindow = Get-TimeWindow -Date $TODAY

$SPLIT = $proxmoxConnectionHost.Split(":")

if (!(Test-Connection -TargetName $SPLIT[0] -TcpPort $SPLIT[1])) {
    Send-AlarmTextMessage "Host $SPLIT ist offline"
    # Message for script end
    Send-AlarmTextMessage $scriptEndMessage
    exit 1
}

# Connect to cluster01
Connect-PveCluster -HostsAndPorts $proxmoxConnectionHost -ApiToken $proxmoxApiToken -SkipCertificateCheck

# Get Cluster-name
$cluster = Get-PveClusterStatus
$pveClusterName = ($cluster.Response.data) | Where-Object { $_.type -eq 'cluster' } | Select-Object -ExpandProperty name

# Get all VM's
$vmList = Get-PveVM -PveTicket $PveTicket -VmIdOrName '*' | Where-Object { $_.type -eq 'qemu' }

# Count all VM's
$totalVms = $vmList.Count

# Send telegramm message with the clustername and the amount of virtual machines
Send-AlarmTextMessage -Message " Im Cluster: $pveClusterName laufen $totalVms virtuelle Maschinen" -alarm $alarm -poshgramBotToken $poshgramBotToken -poshgramBotId $poshgramBotId

# Check if any Vm is available
if ($vmList.count -ne 0) {

    # Get all Vmid's and Nodes
    $vmIDs = $vmList | Select-Object -Property vmid, node

    # Foreach for every vm in the cluster01
    foreach ($vmID in $vmIDs) {

        $vmIdentifier = $vmID.vmid
        $vmOnNode = $vmID.node

        # Variable for every snapshot of each vm
        $vmListSnapShots = Get-PveVMSnapshots -VmIdOrName $vmIdentifier 

        if ($vmListSnapShots.count -ne 0) {
            $Snapshots = $vmListSnapShots.Response.data | Select-Object -ExpandProperty name

            # Filter Snapshots with specific Prefix
            $autoSnapshots = $Snapshots | Where-Object { $_ -match "$PREFIX*" }
            if ($autoSnapshots.count -ne 0) {

                # Create empty Array
                $snapshotArray = @()

                # Re-Format Snapshot-Information
                foreach ($AutoSnapshot in $autoSnapshots) {
                    $SnapshotName = $AutoSnapshot

                    # Remove Prefix of Snapshot
                    $snapshotDateSting = ($AutoSnapshot.remove(0, $PREFIX_LENGTH))

                    # Extract Date from String
                    $snapshotDate = [datetime]::parseexact($snapshotDateSting, 'yyyyMMddHHmm', $null)

                    # Calculate age of Snapshot in Days
                    $differenceInDaysCalculation = new-timespan -Start $snapshotDate -End $TODAY

                    # New Variable for Difference in Days
                    $differenceInDays = $differenceInDaysCalculation.Days

                    # Evaluate Timewindow of Snapshot
                    $SnapshotTimewindow = Get-TimeWindow $snapshotDate

                    # Create custom output-object
                    $singleSnapshot = new-object psobject
                    $singleSnapshot | add-member noteproperty SnapshotName $SnapshotName
                    $singleSnapshot | add-member noteproperty snapshotDateSting $snapshotDateSting
                    $singleSnapshot | add-member noteproperty snapshotDate $snapshotDate
                    $singleSnapshot | add-member noteproperty SnapshotTimewindow $SnapshotTimewindow
                    $singleSnapshot | add-member noteproperty differenceInDays $differenceInDays

                    # Add object to array
                    $snapshotArray += $singleSnapshot
                }

                # Filter Snapshots in context of Keep-Variable
                $snapshots2Delete = $snapshotArray | Where-Object { $_.differenceInDays -ge $KEEPSNAPSHOT_IN_DAYS -and $_.SnapshotTimeWindow -eq $executionTimeWindow }

                # Get snapshot2Delete Name
                $snapshot2DeleteName = $snapshot2Delete.SnapshotName
 
                # Foreach loop for every snapshot2Delete
                foreach ($snapshot2Delete in $snapshots2Delete) {
                    $delete = Remove-PveVMSnapshot -VmIdOrName $vmIdentifier -Snapname $snapshot2Delete.SnapshotName
 
                    # Do Until Task is not True
                    Do {
                        $waitUntilDeleteFinished = Wait-PveTaskIsFinish -Upid $delete.Response.data -Timeout $proxmoxTaskTimeout
                    }
 
                    Until ($waitUntilDeleteFinished -eq "true")
                    Write-Debug "Task Snapshot löschen auf der VM $vmIdentifier auf dem Node $vmOnNode ist abgeschlossen Snapname $snapshot2DeleteName wurde gelöscht"
 
                    # Get Node Task Status
                    $pveDeleteTask = Get-PveNodesTasksStatus -Node $vmID.node -PveTicket $PveTicketLast -Upid $delete.Response.data
 
                    if ($pveDeleteTask.Response.data.exitstatus -ne "OK") {
                        Write-Debug "Fehler beim Löschen des Snapshots auf der VM $vmIdentifier auf dem Node $vmOnNode Snapname $snapshot2DeleteName konnte nicht gelÃ¶scht werden"
                        if (!($pveDeleteTask.Response.data.exitstatus)) {
                            Write-Debug "Vorsicht!! der Task für das Löschen eines Snapshots hat noch keinen Exit Status ( VM: $vmidentifier, Node: $vmOnNode, Snapshot Name: $snapshot2DeleteName)"
                            Send-AlarmTextMessage -Message "Vorsicht!! der Task hat noch keinen Exit Status für das Löschen von Snapshots ( VM: $vmidentifier, Node: $vmOnNode, Snapshot Name: $snapshot2DeleteName)" -alarm $alarm -poshgramBotToken $poshgramBotToken -poshgramBotId $poshgramBotId
                        }
                    }
                }
            }
 
            # Create a new Snapshot for every VM with a Snapshotname
            $create = New-PveVMSnapshot -VmIdOrName $vmID.vmid -Snapname $newSnapShotName
 
            # Do the create VM Snapshot Task until the value is true, the timeout is set.
            Do {
                $waitUntilCreateFinished = Wait-PveTaskIsFinish -Upid $create.Response.data -Timeout $proxmoxTaskTimeout
            }
 
            Until ($waitUntilCreateFinished -eq "true")
            Write-Debug  "Task Snapshot erstellen auf der VM $vmIdentifier auf dem Node $vmOnNode ist abgeschlossen. Snapname: $newSnapShotName wurde generiert "
 
            # Get Node Task Status
            $pveCreateTask = Get-PveNodesTasksStatus -Node $vmID.node -PveTicket $PveTicketLast -Upid $create.Response.data
 
            if ($pveCreateTask.Response.data.exitstatus -ne "OK") {
                Write-Debug "Fehler bei der Erstellung des auf der VM $vmIdentifier auf dem Node $vmOnNode Snapname: $newSnapShotName konnte nicht generiert werden"
 
                if (!($pveCreateTask.Response.data.exitstatus)) {
                    Write-Debug "Vorsicht!! der Task für die Erstellung eines Snapshots hat noch keinen Exit Status ( VM: $vmidentifier, Node: $vmOnNode, Snapshot Name: $newSnapShotName)"
                    Send-AlarmTextMessage -Message "Vorsicht!! der Task hat noch keinen Exit Status für die Erstellung von Snapshots ( VM: $vmidentifier, Node: $vmOnNode, Snapshot Name: $newSnapShotName)" -alarm $alarm -poshgramBotToken $poshgramBotToken -poshgramBotId $poshgramBotId
                }
            }
        }
    }        
}

##===============================================
## Footer
##===============================================

else {
    # Send telegramm message
    Send-AlarmTextMessage -Message "Keine VM's im Cluster $pveClusterName gefunden" -alarm $alarm -poshgramBotToken $poshgramBotToken -poshgramBotId $poshgramBotId
}

# Script endmessage via telegram
Send-AlarmTextMessage -Message $scriptEndMessage -alarm $alarm -poshgramBotToken $poshgramBotToken -poshgramBotId $poshgramBotId
